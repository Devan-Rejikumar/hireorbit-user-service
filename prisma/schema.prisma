generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  email        String       @unique
  password     String
  name         String
  role         String
  isVerified   Boolean      @default(false)
  isBlocked    Boolean      @default(false)
  createdAt    DateTime     @default(now())
  isGoogleUser Boolean      @default(false)
  profile      UserProfile?
}

model Otp {
  id        String   @id @default(uuid())
  email     String
  otp       Int
  createdAt DateTime @default(now())
}

model Company {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  companyName String
  industry    String?
  size        String?
  website     String?
  description String?
  isVerified  Boolean  @default(false)
  isBlocked   Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model PasswordReset {
  id        String   @id @default(uuid())
  email     String
  role      String
  otp       String
  expiresAt DateTime
}

model UserProfile {
  id             String       @id @default(uuid())
  userId         String       @unique
  headline       String?
  about          String?
  profilePicture String?
  location       String?
  phone          String?
  skills         String[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  resume         String?
  certifications Json?  
  achievements   String?
  education      Education[]
  experience     Experience[]
  user           User         @relation(fields: [userId], references: [id])
}

model Experience {
  id            String      @id @default(uuid())
  title         String
  company       String
  location      String?
  startDate     DateTime
  endDate       DateTime?
  description   String?
  isCurrentRole Boolean     @default(false)
  profileId     String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  profile       UserProfile @relation(fields: [profileId], references: [id])
}

model Education {
  id          String      @id @default(uuid())
  institution String
  degree      String
  startDate   DateTime
  endDate     DateTime?
  profileId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  profile     UserProfile @relation(fields: [profileId], references: [id])
}
