// This block tells Prisma how to connect to your database
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// This block tells Prisma to generate the client
generator client {
  provider = "prisma-client-js"
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  name       String 
  role       String
  isVerified Boolean  @default(false)
  isBlocked  Boolean  @default(false)
  isGoogleUser    Boolean  @default(false)
  createdAt  DateTime @default(now())
  profile    UserProfile?
}

model Otp {
  id        String   @id @default(uuid())
  email     String
  otp       Int
  createdAt DateTime @default(now())
}

model Company {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  companyName String
  industry    String?
  size        String?  // "1-10", "11-50", "51-200", "200+"
  website     String?
  description String?
  isVerified  Boolean  @default(false)  // Admin must verify
  isBlocked   Boolean  @default(false)
  createdAt   DateTime @default(now())
}
model PasswordReset {
     id         String   @id @default(uuid())
     email      String
     role       String
     otp        String
     expiresAt  DateTime
     
   }

   model UserProfile {
  id            String       @id @default(uuid())
  userId        String      @unique
  user          User        @relation(fields: [userId], references: [id])
  headline      String?
  about         String?     @db.Text
  profilePicture String?
  location      String?
  phone         String?
  skills        String[]
  experience    Experience[]
  education     Education[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Experience {
  id            String      @id @default(uuid())
  title         String
  company       String
  location      String?
  startDate     DateTime
  endDate       DateTime?
  description   String?     @db.Text
  isCurrentRole Boolean     @default(false)
  profile       UserProfile @relation(fields: [profileId], references: [id])
  profileId     String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Education {
  id           String      @id @default(uuid())
  institutuion String
  degree       String
  startDate    DateTime
  endDate      DateTime?
  profile      UserProfile @relation(fields: [profileId], references: [id])
  profileId    String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}